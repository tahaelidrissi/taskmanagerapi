name: Build and Deploy via SSH
on:
  push:
    branches:
      - docker-swarm-deploy
env:
  IMAGE_NAME: taskmanagerapi
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest .
      
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
      
      - name: Clone repository to PWD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: direct.labs.play-with-docker.com
          username: ${{ secrets.PWD_USERNAME }}
          key: ${{ secrets.PWD_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 5m
          script: |
            set -euo pipefail
            echo "üîß Step 1: Cloning repository..."
            
            # Clean slate
            rm -rf taskmanagerapi
            
            # Git clone with retry logic
            for i in {1..3}; do
              echo "Clone attempt $i/3..."
              if timeout 180 git clone --depth 1 https://github.com/${{ github.repository }}.git taskmanagerapi; then
                echo "‚úÖ Repository cloned successfully"
                break
              else
                echo "‚ùå Clone attempt $i failed, retrying in 10 seconds..."
                rm -rf taskmanagerapi
                sleep 10
                if [ $i -eq 3 ]; then
                  echo "‚ùå All clone attempts failed"
                  exit 1
                fi
              fi
            done
            
            # Verify clone
            if [ ! -d "taskmanagerapi" ]; then
              echo "‚ùå Repository directory not found"
              exit 1
            fi
            
            echo "‚úÖ Clone step completed successfully"
      
      - name: Checkout branch and verify files
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: direct.labs.play-with-docker.com
          username: ${{ secrets.PWD_USERNAME }}
          key: ${{ secrets.PWD_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 3m
          script: |
            set -euo pipefail
            echo "üîß Step 2: Checking out branch and verifying files..."
            
            cd taskmanagerapi
            echo "Current directory: $(pwd)"
            
            # Check available branches
            echo "Available branches:"
            git branch -a
            
            # Fetch and checkout docker-swarm-deploy branch
            echo "Fetching docker-swarm-deploy branch..."
            for i in {1..3}; do
              if git fetch origin docker-swarm-deploy; then
                echo "‚úÖ Branch fetched successfully"
                break
              else
                echo "‚ùå Fetch attempt $i failed, retrying..."
                sleep 5
                if [ $i -eq 3 ]; then
                  echo "‚ùå Failed to fetch branch"
                  exit 1
                fi
              fi
            done
            
            # Checkout branch
            echo "Checking out docker-swarm-deploy branch..."
            git checkout docker-swarm-deploy
            
            # Verify we're on correct branch
            current_branch=$(git branch --show-current)
            echo "Current branch: $current_branch"
            
            if [ "$current_branch" != "docker-swarm-deploy" ]; then
              echo "‚ùå Failed to checkout correct branch"
              exit 1
            fi
            
            # Verify stack.yml exists
            echo "Verifying deployment files..."
            if [ -f "stack.yml" ]; then
              echo "‚úÖ stack.yml found!"
              echo "Stack file contents:"
              cat stack.yml
            else
              echo "‚ùå stack.yml not found in docker-swarm-deploy branch!"
              echo "Available files:"
              ls -la
              exit 1
            fi
            
            echo "‚úÖ Branch checkout and verification completed"
      
      - name: Deploy stack to Docker Swarm
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: direct.labs.play-with-docker.com
          username: ${{ secrets.PWD_USERNAME }}
          key: ${{ secrets.PWD_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10m
          script: |
            set -euo pipefail
            echo "üîß Step 3: Deploying to Docker Swarm..."
            
            cd taskmanagerapi
            
            # Verify Docker Swarm is initialized
            if ! docker info | grep -q "Swarm: active"; then
              echo "Initializing Docker Swarm..."
              docker swarm init
            else
              echo "‚úÖ Docker Swarm is already active"
            fi
            
            # Set environment variables for deployment
            export MONGO_URI="${{ secrets.MONGO_URI }}"
            echo "Environment variables configured"
            
            # Login to Docker Hub
            echo "Logging into Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Pull latest image with retry
            echo "Pulling Docker image..."
            for i in {1..3}; do
              if docker pull "${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest"; then
                echo "‚úÖ Image pulled successfully"
                break
              else
                echo "‚ùå Pull attempt $i failed, retrying..."
                sleep 10
                if [ $i -eq 3 ]; then
                  echo "‚ùå Failed to pull image"
                  exit 1
                fi
              fi
            done
            
            # Deploy stack
            echo "Deploying stack to Docker Swarm..."
            if docker stack deploy -c stack.yml --with-registry-auth taskmanager; then
              echo "‚úÖ Stack deployed successfully!"
            else
              echo "‚ùå Stack deployment failed"
              exit 1
            fi
            
            # Wait for services to be ready
            echo "Waiting for services to start..."
            sleep 30
            
            # Show deployment status
            echo "üìä Deployment Status:"
            echo "Stack list:"
            docker stack ls
            echo ""
            echo "Service list:"
            docker service ls
            echo ""
            echo "Service logs (last 10 lines):"
            docker service logs --tail 10 taskmanager_web || true
            
            echo "‚úÖ Deployment completed successfully!"