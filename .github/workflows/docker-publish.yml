name: Build and Deploy via SSH
on:
  push:
    branches:
      - docker-swarm-deploy
env:
  IMAGE_NAME: taskmanagerapi
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: docker-swarm-deploy
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest .
      
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
      
      - name: Deploy to PWD using SSH Deploy
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PWD_SSH_KEY }}
          REMOTE_HOST: direct.labs.play-with-docker.com
          REMOTE_USER: ${{ secrets.PWD_USERNAME }}
          SCRIPT_AFTER: |
            echo "üîß Starting repository clone..."
            
            # Check current directory
            echo "Current directory: $(pwd)"
            
            # Remove existing directory if it exists
            rm -rf taskmanagerapi
            
            # Clone repository
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git taskmanagerapi
            
            if [ -d "taskmanagerapi" ]; then
              echo "‚úÖ Repository cloned successfully!"
            else
              echo "‚ùå Clone failed!"
              exit 1
            fi
            
            # Check if we're in root and cd to project
            echo "Checking current location..."
            if [ "$(pwd)" = "/root" ]; then
              echo "‚úÖ We are in root directory"
            else
              echo "Current directory: $(pwd)"
            fi
            
            echo "Changing to project directory..."
            cd taskmanagerapi
            
            echo "‚úÖ Successfully changed to project directory: $(pwd)"
            
            # Show available branches
            echo "Available branches:"
            git branch -a
            
            # Checkout to docker-swarm-deploy branch
            echo "Checking out to docker-swarm-deploy branch..."
            git fetch origin docker-swarm-deploy
            git checkout docker-swarm-deploy
            
            # Verify we're on the right branch
            current_branch=$(git branch --show-current)
            echo "‚úÖ Current branch: $current_branch"
            
            # Look for stack.yml file
            echo "Looking for stack.yml file..."
            if [ -f "stack.yml" ]; then
              echo "‚úÖ Found stack.yml file!"
              echo "Stack.yml contents:"
              cat stack.yml
            else
              echo "‚ùå stack.yml file not found!"
              echo "Available files in current directory:"
              ls -la
              exit 1
            fi
            
            echo "üîß Starting Docker Swarm deployment..."
            
            # Initialize Docker Swarm
            docker swarm init || echo "‚úÖ Docker Swarm already active"
            
            # Set environment variables
            export MONGO_URI="${{ secrets.MONGO_URI }}"
            echo "Environment variables set"
            
            # Login to Docker Hub
            echo "Logging into Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Pull image
            echo "Pulling Docker image..."
            docker pull "${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest"
            
            # Deploy stack
            echo "Deploying stack..."
            docker stack deploy -c stack.yml --with-registry-auth taskmanager
            
            echo "‚úÖ Deployment completed successfully!"
            
            # Show status
            echo "üìä Stack Status:"
            docker stack ls
            docker service ls